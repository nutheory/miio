<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

LinkedIn contacts importer

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this importer!');

global $_OZ_SERVICES;
$_OZ_SERVICES['linkedin'] = array('type'=>'abi', 'label'=>'LinkedIn', 'class'=>'LinkedInImporter');

/////////////////////////////////////////////////////////////////////////////////////////
//LinkedInImporter
/////////////////////////////////////////////////////////////////////////////////////////
//@api
class LinkedInImporter extends WebRequestor {

	var $CONTACT_REGEX = "/var s\\d+=\\{\\};(.*?)\\.profileLink=/ims";
	var $EMAIL_REGEX = "/var s\\d+=\"([^\"]*)\";s\\d+.emailAddress=s\\d+/ims";
	var $FNAME_REGEX = "/var s\\d+=\"([^\"]*)\";s\\d+.firstName=s\\d+/ims";
	var $LNAME_REGEX = "/var s\\d+=\"([^\"]*)\";s\\d+.lastName=s\\d+/ims";

	var $AVAILABLEPAGES_REGEX = "/var s\\d+=\"([A-Z#])\";s\\d+\\[\\d+\\]=s\\d+;/ims";
	var $DEFINEDPAGE_REGEX = "/;s\\d+\\['([A-Z#])'\\]=s\\d+;/ims";

	var $JSESSIONID_REGEX = "/name=\"csrfToken\"\\s+value=\"([^\"]+)\">/ims";

	var $jsessionId;


	//@api
	function getInfo () {
		return array('id'=>'linkedin');
	}

	//@api
	function login ($loginemail, $password) {
	 
		$this->jsessionId = NULL;
	 
		//Remove trailing .linkedin.com. Could do better with regex.
		$loginemail = strtolower($loginemail);
		$loginemail = str_replace(".linkedin","",$loginemail);

		$this->setOwnerEmail($loginemail);
		oz_set_domain('linkedin');

		$form = new HttpForm;
		$form->addField("session_key", $loginemail);
		$form->addField("session_password", $password);
		$form->addField("session_login", "Sign In");
		$form->addField("_authtrkcde", "{#TRKCDE#}");
		$postData = $form->buildPostData();
		$html = $this->httpPost("https://www.linkedin.com/secure/login", $postData);
		if (strpos($html, 'class="denied"')!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}

		//$url = oz_get_refresh_url($html);
		//if ($url!==NULL)
		//	$html = $this->httpGet($url);
		$html = $this->httpGet("http://www.linkedin.com/home");
		
		if (preg_match($this->JSESSIONID_REGEX,$html,$matches)) {
		 	$this->jsessionId = $matches[1];
		}
		
		return abi_set_success();
	}

	//@api
	function logout() {
		$this->httpGet("https://www.linkedin.com/secure/login?session_full_logout=&trk=hb_signout");
	}

	//@api
	function fetchContacts ($loginemail, $password) {

		$res = $this->login($loginemail,$password);
		if ($res!=_ABI_SUCCESS) return $res;

		if (!$this->jsessionId) {
			$va = $this->cookiejar->getCookieValues('http://www.linkedin.com/','JSESSIONID');
			if (empty($va))  {
				$this->close();
				return abi_set_error(_ABI_FAILED,'Cannot find JSESSIONID');
			}
			$this->jsessionId = $va[0];
		}


		$cl = array();
		$page = "DONT_CARE";
		$pages = NULL;
		$pagecount = 1;
		$MAX_PAGES = oz_get_config('limit.max_pages',30);
		
		do {
			// Fetch the page
			$v = time() & 0x0FFFFFFF;
			$sb="callCount=1\r\n";
			$sb.="JSESSIONID=$this->jsessionId\r\n";
			$sb.="c0-scriptName=ConnectionsBrowserService\r\n";
			$sb.="c0-methodName=getMyConnections\r\n";
			$sb.="c0-id=$v\r\n";
			$sb.="c0-param0=string:0\r\n";
			$sb.="c0-param1=number:-1\r\n";
			$sb.="c0-param2=string:$page\r\n";
			$sb.="c0-param3=number:5000\r\n";
			$sb.="c0-param4=boolean:false\r\n";
			$sb.="c0-param5=boolean:true\r\n";
			$sb.="xml=true\r\n";
			$url = "/dwr/exec/ConnectionsBrowserService.getMyConnections.dwr";
			//$extraHeaders = array('Content-Type'=>'text/plain');
			$extraHeaders = array('Content-Type: text/plain');
			$html = $this->httpPost($url,$sb, 'utf-8',$extraHeaders);

			if ($pages===NULL) {
				$pages=array();
				preg_match_all($this->AVAILABLEPAGES_REGEX, $html, $matches, PREG_SET_ORDER);
				foreach ($matches as $val) {
					$s = trim($val[1]);
					$pages[$s]=TRUE;
				}
			}

			preg_match_all($this->DEFINEDPAGE_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$s = trim($val[1]);
				unset($pages[$s]);
			}


			preg_match_all($this->CONTACT_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$js = $val[0];
				if (preg_match($this->EMAIL_REGEX,$js,$matches2)) {
					$email = oz_jsdecode($matches2[1]);
					if (abi_valid_email($email)) {
						$fname = preg_match($this->FNAME_REGEX,$js,$matches2) ? oz_jsdecode($matches2[1]) : '';
						$lname = preg_match($this->LNAME_REGEX,$js,$matches2) ? oz_jsdecode($matches2[1]) : '';
						$name = trim($fname.' '.$lname);
						$name = htmlentities2utf8($name);
						$cl[] = new Contact($name,$email);
					}
				}
			}

			// Determine next page to retrieve
			if (count($pages)===0) break;
			foreach ($pages as $k=>$v) {
				$page = $k;
				break;
			}
			unset($pages[$page]);
			$pagecount++;

		} while ($pagecount <= $MAX_PAGES);



		$this->close();
		return $cl;
	}
}

//LinkedIn
global $_DOMAIN_IMPORTERS;
$_DOMAIN_IMPORTERS["linkedin"] = 'LinkedInImporter';
