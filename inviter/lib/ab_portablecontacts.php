<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

PortableContacts contacts importer

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
if (!defined('__ABI')) die('Please include abi.php to use this importer!');

/////////////////////////////////////////////////////////////////////////////////////////
//PortableContactsImporter
/////////////////////////////////////////////////////////////////////////////////////////

//@api
class PortableContactsImporter extends WebRequestor {

	var $apiUrl;
	var $extraHeaders;

	//@api
	function removeSuffix ($email) {
	 	return $email;
	}
	
	function PortableContactsImporter($apiUrl) {
		parent::WebRequestor();
		$this->WebRequestor();
		$this->apiUrl = $apiUrl;
	}
	
	//@api
	function getInfo () {
		return array('id'=>'portablecontacts');
	}
	
	//@api
	function login ($email, $password) {
	 
	 	$email = $this->removeSuffix(strtolower(trim($email)));
	 	
		// Create basic http authentication header
		$basicauth = base64_encode($email.':'.$password);
		$this->extraHeaders = array();
		$this->extraHeaders[] = "Authorization: Basic $basicauth";
		return abi_set_success();
	}

	//@api
	function logout () {
	 	$this->extraHeaders = NULL;
	}

	//@api
	function fetchContacts ($email=null, $password=null) {
	 
		if ($email!=null) {
			$res = $this->login($email,$password);
			if ($res!==_ABI_SUCCESS)
				return $res;
		}

		$cl = array();
		$MAX_PER_PAGE = 5000;
	 
		for ($startIndex = 0;;) {
			$url = $this->apiUrl."/@me/@all?format=json&startIndex=".$startIndex."&count=".$MAX_PER_PAGE."&fields=displayName,emails";
			//$url = $this->apiUrl.'/@me/@all?format=json&count=100000&fields=displayName,emails';
			$json = $this->httpRequest($url,false,null,null,$this->extraHeaders);
			
			$status = $this->lastStatusCode;
			if ($status == 401) {
				$this->close();
				return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
			}
			else if ($status !== 200) {
				$this->close();
				return abi_set_error(_ABI_FAILED,'Received error '.$status);
			}
	
			
			$main = oz_json_decode($json,TRUE);
			if (!isset($main['entry'])) {
				$this->close();
				return abi_set_error(_ABI_FAILED,'Cannot find entry');
			}
			$totalResults = intval($main['totalResults']);

			$entries = $main['entry'];
			foreach ($entries as $contact) {
			 	$name = isset($contact['displayName']) ? $contact['displayName'] : '';
			 	if (isset($contact['emails'])) {
				 	$emails = $contact['emails'];
				 	foreach ($emails as $emailEntry) {
				 	 	$email = $emailEntry['value'];
				 	 	if (abi_valid_email($email)) {
							$cl[] = new Contact($name,$email);
						}
					}
				}
			}

			$startIndex += count($entries);
			if ($startIndex >= $totalResults)
				break;
		}
		return $cl;
	}
	
	function _get($obj, $name, $defaultValue=NULL) {
		return isset($obj[$name])?$obj[$name]:$defaultValue;
	}
	

	//@api
	function fetchAbContacts () {
	 
		$cl = array();
		$MAX_PER_PAGE = 5000;

		for ($startIndex = 0;;) {
			$url = $this->apiUrl."/@me/@all?format=json&startIndex=".$startIndex."&count=".$MAX_PER_PAGE."&fields=#all";
	 
	//		$url = $this->apiUrl.'/@me/@all?format=json&count=100000&fields=displayName,name,nickname,birthday,anniversary,gender,note,emails,urls,phoneNumbers,ims,addresses,organizations';
	//		$url = $this->apiUrl.'/@me/@all?format=json&count=100000&fields=@all';
			$json = $this->httpRequest($url,false,null,null,$this->extraHeaders);
			
			$status = $this->lastStatusCode;
			if ($status == 401) {
				$this->close();
				return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
			}
			else if ($status !== 200) {
				$this->close();
				return abi_set_error(_ABI_FAILED,'Received error '.$status);
			}
	
			$cl = array();
			
			$main = oz_json_decode($json,TRUE);
			if (!isset($main['entry'])) {
				$this->close();
				return abi_set_error(_ABI_FAILED,'Cannot find entry');
			}
			$totalResults = intval($main['totalResults']);
			$entries = $main['entry'];
			foreach ($entries as $contact) {
			
				$c = new AbContact;
				
				//id
				
				$c->displayName = $this->_get($contact, 'displayName');
	
				$name = $this->_get($contact, 'name');
				if ($name) {
					$c->firstName = $this->_get($name,'givenName');
					$c->lastName = $this->_get($name,'familyName');
					$c->middleName = $this->_get($name,'middleName');
					$c->title = $this->_get($name,'honorificPrefix');
					$c->suffix = $this->_get($name,'honorificSuffix');
					$c->nickName = $this->_get($name,'nickname');
				}
				
				//published
				//updated
			
				$v = $this->_get($contact, 'birthday');
				if ($v) $c->dates[] = new AbContactDate(DATE_BIRTHDAY,$v);
				$v = $this->_get($contact, 'anniversary');
				if ($v) $c->dates[] = new AbContactDate(DATE_ANNIVERSARY,$v);
	
				
				$c->gender = $this->_get($contact, 'gender','undisclosed');	//male, female, undisclosed
				$c->notes = $this->_get($contact, 'note');
				
				//preferredUsername
				//utcOffset
				//connected
				//OpenSocial fields: aboutMe, bodyType, currentLocation, drinker, ethnicity, fashion, happiestWhen, humor, livingArrangement, lookingFor, profileSong, profileVideo, relationshipStatus, religion, romance, scaredOf, sexualOrientation, smoker, and status.
				
	
				$list = $this->_get($contact, 'emails',array());
			 	foreach ($list as $ele) {
			 	 	$t = $ele['type'];
			 	 	$v = $ele['value'];
					if ($t==="work") $c->emails[] = new AbContactEmail(EMAIL_WORK,$v);
					else if ($t==="home") $c->emails[] = new AbContactEmail(EMAIL_HOME,$v);
					else if ($t==="other") $c->emails[] = new AbContactEmail(EMAIL_OTHER,$v);
					else $c->emails[] = new AbContactEmail($t,$v);
				}
	
				$list = $this->_get($contact, 'urls',array());
			 	foreach ($list as $ele) {
			 	 	$t = $ele['type'];
			 	 	$v = $ele['value'];
					if ($t==="work") $c->websites[] = new AbContactWebsite(WEBSITE_BUSINESS,$v);
					else if ($t==="home") $c->websites[] = new AbContactWebsite(WEBSITE_PERSONAL,$v);
					else if ($t==="other") $c->websites[] = new AbContactWebsite(WEBSITE_OTHER,$v);
					else if ($t==="blog") $c->websites[] = new AbContactWebsite(WEBSITE_BLOG,$v);
					else if ($t==="profile") $c->websites[] = new AbContactWebsite(WEBSITE_PROFILE,$v);
					else $c->websites[] = new AbContactWebsite($t,$v);
				}
				
				$list = $this->_get($contact, 'ims',array());
			 	foreach ($list as $ele) {
			 	 	$t = $ele['type'];
			 	 	$v = $ele['value'];
					if ($t==="aim") $c->instantMessengers[] = new AbContactInstantMessenger(IM_AIM,$v,'');
					else if ($t==="gtalk") $c->instantMessengers[] = new AbContactInstantMessenger(IM_SKYPE,$v,'');
					else if ($t==="icq") $c->instantMessengers[] = new AbContactInstantMessenger(IM_ICQ,$v,'');
					else if ($t==="xmpp") $c->instantMessengers[] = new AbContactInstantMessenger(IM_JABBER,$v,'');
					else if ($t==="msn") $c->instantMessengers[] = new AbContactInstantMessenger(IM_MSN,$v,'');
					else if ($t==="skype") $c->instantMessengers[] = new AbContactInstantMessenger(IM_SKYPE,$v,'');
					else if ($t==="qq") $c->instantMessengers[] = new AbContactInstantMessenger(IM_QQ,$v,'');
					else if ($t==="yahoo") $c->instantMessengers[] = new AbContactInstantMessenger(IM_YAHOO,$v,'');
					else if ($t==="other") $c->instantMessengers[] = new AbContactInstantMessenger(IM_OTHER,$v,'');
					else $c->instantMessengers[] = new AbContactInstantMessenger($t,$v,'');
				}
				
				$list = $this->_get($contact, 'phoneNumbers',array());
			 	foreach ($list as $ele) {
			 	 	$t = $ele['type'];
			 	 	$v = $ele['value'];
					if ($t==="work") $c->phones[] = new AbContactPhone(PHONE_WORK,$v);
					else if ($t==="home") $c->phones[] = new AbContactPhone(PHONE_HOME,$v);
					else if ($t==="pager") $c->phones[] = new AbContactPhone(PHONE_PAGER,$v);
					else if ($t==="fax") $c->phones[] = new AbContactPhone(PHONE_OTHERFAX,$v);
					else if ($t==="mobile") $c->phones[] = new AbContactPhone(PHONE_MOBILE,$v);
					else if ($t==="other") $c->phones[] = new AbContactPhone(PHONE_OTHER,$v);
					else $c->phones[] = new AbContactPhone($t,$v);
				}
				
				$list = $this->_get($contact, 'addresses',array());
			 	foreach ($list as $ele) {
			 	 	$t = $ele['type'];
			 	 	//$v = $ele['value'];
					
					$v = new AbContactAddress();
					$v->type = ADDRESS_HOME;
					$v->street1 = $this->_get($ele,'streetAddress');
					$v->street2 = NULL;
					$v->street3 = NULL;
					$v->city = $this->_get($ele,'locality');
					$v->state = $this->_get($ele,'region');
					$v->postal = $this->_get($ele,'postalCode');
					$v->country = $this->_get($ele,'country');
					
					if ($t==="work") $v->type = ADDRESS_WORK;
					else if ($t==="home") $v->type = ADDRESS_HOME;
					else if ($t==="other") $v->type = ADDRESS_OTHER;
					else $v->type =$t;
					
					if (!$v->is_empty()) $c->addresses[] = $v;
				}			
				
				
				$cl[] = $c;
			}
			
			$startIndex += count($entries);
			if ($startIndex >= $totalResults)
				break;
		}
		return $cl;
	}	

	//@api
	function fetchContacts2 ($loginemail, $password) {
		$res = $this->login($loginemail,$password);
		if ($res!=_ABI_SUCCESS) return $res;
		return abcontactlist_to_olcontactlist($this->fetchAbContacts());
	}
}
