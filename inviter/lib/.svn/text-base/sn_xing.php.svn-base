<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Xing friends list importer and invite sender

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['is_xing'] = array('type'=>'is', 'label'=>'Xing', 'class'=>'XingInviter');

/////////////////////////////////////////////////////////////////////////////////////////
//XingInviter
/////////////////////////////////////////////////////////////////////////////////////////
class XingContact extends SocialContact {
	function XingContact ($uid, $name, $imgurl) {
		parent::SocialContact($uid, $name, $imgurl);
	}
}

define('XingInviter_LIST_CONTACTS_REGEX',"/<img src=\"([^\"]+)\"[^>]*?alt=\"([^\"]*)\"[^>]*?user-photo-list.*?contact\\?op=introduce;id=([\\w\\d\\\\.]+)/ims");
define('XingInviter_THUMB_CONTACTS_REGEX',"/<div class=\"photo\">\\s*<a[^>]*?href=\"\/profile[^>]*>\\s*<img src=\"([^\"]+)\"[^>]*?alt=\"([^\"]*)\"[^>]*>.*?contact\\?op=introduce;id=([\\w\\d\\\\.]+)/ims");
define('XingInviter_NEXTPAGE_REGEX',"/<a href=\"([^\"]*)\">[^<]*&gt;&gt;[^<]*<\/a>/ims");
define('XingInviter_MAXRCPT_REGEX',"/maxRecipients:\\s*(\\d+)/ims");
define('XingInviter_FETCHSID_REGEX',"/additional_get_params:\\s*\\{\\s*sid:\\s*\"([^\"]*)\"/ims");

//@api
class XingInviter extends WebRequestor {

// LISTING:
//<img src="([^"]+)"[^>]*?alt="([^"]*)"[^>]*?user-photo-list.*?contact\?op=introduce;id=([\w\d\\.]+)
//THUMBNAIL
//<div class="photo">\s*<a[^>]*?href="/profile[^>]*>\s*<img src="([^"]+)"[^>]*?alt="([^"]*)"[^>]*>.*?contact\?op=introduce;id=([\w\d\\.]+)

	var $batchSize = -1;
	var $premiumMember = false;
	var $fetchSid = NULL;
	var $sendSid = NULL;

	//@api
	function getInfo () {
		return array('id'=>'xing');
	}

	//@api
	function isPremiumMember () {
		return $this->premiumMember;
	}

	//@api
	function login ($id, $password) {
		oz_set_domain('xing');

		$this->fetchSid = NULL;
		$this->sendSid = NULL;
	
		$form = new HttpForm;
		$form->action = 'https://www.xing.com/app/user';
		$form->addField('op','login');
		$form->addField('dest','/app/user?op=home');
		$form->addField('login_user_name',$id);
		$form->addField('login_password',$password);
		$form->addField("_authtrkcde", "{#TRKCDE#}");
		$html = $this->postForm($form);
		if (strpos($html, 'class="error-message-top"')!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}
		$this->premiumMember = true;	//Assume premium
		
		
		if (!preg_match(XingInviter_FETCHSID_REGEX,$html,$matches)) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find sid');
		}
		$this->fetchSid = $matches[1];
		
		
		return abi_set_success();
	}

	//@api
	function fetchContacts ($maxFetch=NULL, $maxPages=NULL) {

		//Get max contacts, pages, duration to fetch contacts
		if ($maxFetch===NULL) $maxFetch = oz_get_config('limit.max_contacts',1000);
		if ($maxPages===NULL) $maxPages = oz_get_config('limit.max_pages',30);


		$headers = array('X-Prototype-Version: 1.6.1', 'X-Requested-With: XMLHttpRequest');
		$html = $this->httpRequest ("https://www.xing.com/app/contact?op=suggest&get_contacts=1&get_tags=0&get_profile_urls=0&query=&sid=".$this->fetchSid,
			false,null,'iso-8859-1',$headers,null);
			
		$i1 = strpos($html,'{');
		$i2 = strrpos($html,'}');
		if ($i1===FALSE || $i2===FALSE || $i1>$i2) {
			return abi_set_error(_ABI_FAILED,'Unexpected js contacts list');
		}
		$html = substr($html,$i1,$i2-$i1+1);
		
		$cl = array();
		$jv = oz_json_decode($html,true);
		$ids = isset($jv['user_ids']) ? $jv['user_ids'] : null;
		$photos = isset($jv['user_photo_urls']) ? $jv['user_photo_urls'] : null;
		$names = isset($jv['user_display_names']) ? $jv['user_display_names'] : null;
		if ($ids===NULL) {
			return abi_set_error(_ABI_FAILED,'Cannot find ids list');
		}
		$n = count($ids);
		for ($i=0; $i<$n; $i++) {
			$id = $ids[$i];
			$name = $names!==NULL ? $names[$i] : NULL;
			$image = $photos!==NULL && $photos[$i]!==NULL ? $this->makeAbsolute($this->lastUrl,$photos[$i]) : NULL;
			$cl[] = new XingContact($id,$name,$image);
		}
		return $cl;
		
		
/*


		$location = 'https://www.xing.com/app/contact?op=contactlist';
		$html = $this->httpGet($location);

		//Loop
		$ids = array();
		$al = array();
		//Allow up to 30 pages of contacts
		for ($i=0; $i<$maxPages; ++$i) {
			//Extract contacts on page

			//Try listing regex. If fails, try thumbnails regex
			if (preg_match_all(XingInviter_LIST_CONTACTS_REGEX, $html, $matches, PREG_SET_ORDER)==0) {
				preg_match_all(XingInviter_THUMB_CONTACTS_REGEX, $html, $matches, PREG_SET_ORDER);
			}
			foreach ($matches as $val) {
			$uid = trim($val[3]);
			
			$di = strpos($uid,'.');
			if ($di!==FALSE) $uid = substr($uid,0,$di);
			
			if (!isset($ids[$uid])) {
				$ids[$uid] = $uid;
				$name = htmlentities2utf8($this->extractText(trim($val[2])));
				$imgurl = trim($val[1]);
				$imgurl = $this->makeAbsolute($this->lastUrl,htmlentities2utf8($imgurl));
					$contact = new XingContact($uid,$name,$imgurl);
					$al[] = $contact;
					if (count($al)>=$maxFetch) break;
				}
			}
			if (count($al)>=$maxFetch) break;

			//Get next page uri to jump to
			$nextPageUri = null;
			if (preg_match(XingInviter_NEXTPAGE_REGEX,$html,$matches)) {
				$nextPageUri = htmlentities2utf8($matches[1]);
				$nextPageUri = $this->makeAbsolute($this->lastUrl, $nextPageUri);
			}
			//If we're at the last/only page, then exit
			else {
				break;
			}
			$html = $this->httpGet($nextPageUri);
		}
		return $al;
*/		
	}

	//returns true if successful, false if failed.
	//Send a message to multiple recipients
	function internalSendMessages ($uids, $startIndex, $endIndex, $subject, $message) {
		if (!$this->premiumMember)
			return false;

		$form = new HttpForm();
		$form->action = "https://www.xing.com/app/message";
		$form->addField("op", "private_message.send");
		$form->addField("sid", $this->sendSid);
		$form->addField("scr_rec_id", "");
		$form->addField("scr_reply_id", "");
		$form->addField("scr_forward_id", "");
		$form->addField("dest_url", "");
		$form->addField("scr_warn", "");
		$form->addField("contact_confirmed", "0");
		$form->addField("redirect_error", "");
		for ($i=$startIndex; $i<$endIndex; $i++) {
			$uid = $uids[$i];
			if (oz_instanceof($uid,'SocialContact')) $uid = $uid->uid;
			//$j = strpos($uid,'.');
			//if ($j!==FALSE) $uid=substr($uid,0,$j);
			$form->addField('recipient_id[]',$uid);
		}
		$form->addField("emailcc", "");
		$form->addField("subject", $subject);
		$form->addField("body", $message);

		$old = $this->maxRedirects;
		$this->maxRedirects=0;

		$html = $this->postForm($form);

		$this->maxRedirects=$old;

		//New version, avoid redirect to message list
		if (strpos($html,"flash_message_saved=")!==FALSE)
			return TRUE;

		if (strpos($html,"class=\"error-message")!==false)
			return false;
		//if (strpos($html,"class=\"confirm-message")===false)
		//	return false;

		return true;
	 
	}

	//@api
	function sendMessage ($uid, $subject, $message, $saveToSent = false) {
		$uids = array();
		$uids[] = $uid;
		$res = $this->sendMessages($uids, $subject, $message, $saveToSent);
		return $res;
	}

	//@api
	function sendMessages ($uids, $subject, $message, $saveToSent = false) {

		if ($this->batchSize===-1 || $this->sendSid===NULL) {
			$html = $this->httpGet('https://www.xing.com/app/message?op=private_message');

			//User is required to upgrade to premium membership
			if (strpos($this->lastUrl,'/upgrade')!==FALSE || strpos($this->lastUrl,'/billing')!==FALSE) {
				$this->premiumMember = false;
				return false;
			}

			if (preg_match(XingInviter_MAXRCPT_REGEX,$html,$matches)) $this->batchSize = intval($matches[1]);
			else $this->batchSize=10;

			$fo = oz_extract_form_by_name($html,'sendmessage');
			if (is_null($fo)) {
				abi_set_error (_ABI_FAILED,'Cannot find message form');
				return false;
			}
			$f = $fo->getFirstField("sid");
			if (is_null($f)) {
				abi_set_error (_ABI_FAILED,'Cannot find SID');
				return false;
			}
			$this->sendSid = $f->value;
		}

		// Send in batches of 10
		$res = true;
		$start = 0;
		$maxRecipientsPerMessage = $this->batchSize;
		$c = count($uids);
		while ($start < $c) {
			$n = $start + $maxRecipientsPerMessage;
			if ($n > $c) $n = $c;
			$res = $this->internalSendMessages($uids, $start, $n, $subject, $message);
			if ($res === false)
				return $res;
			$start = $n;
		}
		return true;
	}

}

