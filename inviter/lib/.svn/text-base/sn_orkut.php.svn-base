<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Orkut friends list importer and invite sender

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['is_orkut'] = array('type'=>'is', 'label'=>'Orkut', 'class'=>'OrkutInviter');

/////////////////////////////////////////////////////////////////////////////////////////
//OrkutInviter
/////////////////////////////////////////////////////////////////////////////////////////
//@api
class OrkutContact extends SocialContact {
	var $email;
	var $cb;
	function OrkutContact ($uid, $name, $imgurl,$email,$cb) {
		parent::SocialContact($uid, $name, $imgurl);
		$this->email = $email;
		$this->cb = $cb;
	}
}

//@api
class OrkutCaptcha extends CaptchaChallenge {
	var $imageFile;
	//var $postUrl;
	var $form;

	var $remainingContacts;
	var $subject;
	var $message;
}



define('OrkutInviter_UID_REGEX',"/[=:]ID=(\\d+):/ims");
define('OrkutInviter_REDIRECT2_REGEX',"/(https:\/\/www.google.com\/accounts\/(?:CheckCookie|TokenAuth)[^\"]*)\"/i");
define('OrkutInviter_CONTACT_REGEX',"/<a\\s+href=\".*?\/Profile\\.aspx\\?uid=(\\d+)\">\\s*<img[^>]+src=\"([^\"]+)\"[^>]*>\\s*<\/a>.*?<a href=\".*?\/Profile\\.aspx\\?uid=\\d*\">([^<]*)<\/a>/ims");
define('OrkutInviter_POSTTOKEN_REGEX',"/<input[^>]*?name=\"POST_TOKEN\"[^>]*?value=\"([^\"]+)\"[^>]*>/ims");
define('OrkutInviter_SIGNATURE_REGEX',"/<input[^>]*?name=\"signature\"[^>]*?value=\"([^\"]+)\"[^>]*>/ims");
define('OrkutInviter_CAPTCHAIMG_REGEX',"/<img\\s+src=\"(\/CaptchaImage\\?xid=[^\"]*)\"/ims");
define('OrkutInviter_CONTACTHTML_REGEX',"/<div id=\"f\\d+\">(.*?)(?:<div class=\"listdivi\">|<\/form>)/ims");
define('OrkutInviter_CONTACTEMAIL_REGEX',"/onclick=\"_editUser\\('[^']*',\\s*'([^']*)'/ims");
define('OrkutInviter_CONTACTUID_REGEX',"/href=\"\/Main#Profile\\?uid=(\\d+)/ims");
define('OrkutInviter_CONTACTNAME_REGEX',"/<h3\\s+class=\"smller\"[^>]*>.*?<a\\s+href=\"\/Main#Profile\\?uid=\\d+\"\\s*>([^<]*)<\/a>/ims");
define('OrkutInviter_CONTACTIMAGE_REGEX',"/(?:<img[^>]*src=\"([^\"]*)\"[^>]*class\\s*=\\s*\"listimg\")|(?:<img[^>]*class=\"listimg\"[^>]*src=\"([^\"]*))/ims");
define('OrkutInviter_CONTACTCB_REGEX',"/<input\\s+type=\"checkbox\"\\s+name=\"friendCheckbox\"\\s+value=\"([^\"]*)\"/ims");
define('OrkutInviter_NEXTPAGE2_REGEX',"/<a\\s+href=\"(\/ShowFriends\\.aspx\\?show=all&pno=\\d+)\"[^>]*>[^<]+?&gt;<\/a>/ims");

define('OrkutInviter_GROUPNAME', '_TMP');
define('OrkutInviter_GROUPID_REGEX',"/FriendGroup\\((\\d+),'".OrkutInviter_GROUPNAME."',\\d+,/ims");
define('OrkutInviter_NEWGROUPID_REGEX',"/ok\\s*<msg>.*?<groupId>(\\d+)<\/groupId>/ims");
// Add at most this number of users to the group at a time
define('OrkutInviter_ADDGROUP_BATCH_SIZE', 200);

//@api
class OrkutInviter extends WebRequestor {

	
	var $orkutId = null;
	var $post_token = null;
	var $signature = null;
	
	var $id2cb;

	//@api
	function getInfo () {
		return array('id'=>'orkut');
	}

	//@api
	function login ($email, $password) {
		oz_set_domain('orkut');

		$html = $this->httpGet('http://www.orkut.com');
		$form = oz_extract_form_by_id($html,'gaia_loginform');
		if ($form==NULL) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find login form');
		}
		$form->setField("hl", "en-US");
		$form->setField("Email", $email);
		$form->setField("Passwd", $password);
		$form->setField("signIn", "Sign in");
		$postData = $form->buildPostData();
		$html = $this->httpPost($form->action, $postData);
		if (strpos($html, '"errormsg"')!==FALSE ||
			strpos($html, 'Username and password do not match')!==FALSE ||
			strpos($html, 'service is currently not available')!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}

		if (preg_match(OrkutInviter_REDIRECT2_REGEX,$html,$matches)!=0) {
			$location = htmlentities2utf8($matches[1]);
			$html = $this->httpGet($location);
		}

		$location = oz_get_refresh_url($html);
		if ($location!=null)
			$html = $this->httpGet($location);


		//Set-Cookie: orkut_state=ORKUTPREF=ID=16070174280343937544:INF=0:
		$cs = $this->cookiejar->getCookieString($this->lastUrl);
//echo "[COOKIE=$cs]"		;
		if (preg_match(OrkutInviter_UID_REGEX,$cs,$matches)==0) {
//echo "[CANNOT FIND ORKUT ID!]"		 ;
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find orkut user ID');
		}
		$this->orkutId = $matches[1];
		
		return abi_set_success();
	}

/*
	function fetchContacts ($maxFetch=1000, $maxPages=30) {

		$html = $this->httpGet('http://www.orkut.com/FriendsList.aspx?uid='.$this->orkutId);

		//Loop
		$ids = array();
		$al = array();

		//The following will match "us". add it to list to avoid matching it.
		$ids[$this->orkutId] = $this->orkutId;

		//Allow up to 30 pages of contacts
		for ($i=0; $i<$maxPages; ++$i) {

			//Extract contacts on page
			preg_match_all($this->CONTACT_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$uid = trim($val[1]);
				if (!isset($ids[$uid])) {
					$ids[$uid] = $uid;
					$imgurl = htmlentities2utf8(trim($val[2]));
					$name = htmlentities2utf8(trim($val[3]));
					$contact = new OrkutContact($uid,$name,$imgurl);
					$al[] = $contact;
					if (count($al)>=$maxFetch) break;
				}

			}
			if (count($al)>=$maxFetch) break;
			if ($i+1>=$maxPages) break;

			//Get next page uri to jump to
			$nextPageUri = null;
			if (preg_match($this->NEXTPAGE_REGEX,$html,$matches)) {
				$nextPageUri = html_entity_decode($matches[1]);
				$nextPageUri = $this->makeAbsolute($this->lastUrl, $nextPageUri);
			}
			//If we're at the last/only page, then exit
			if (empty($nextPageUri)) {
				break;
			}
			$html = $this->httpGet($nextPageUri);
		}

		return $al;
	}
*/


	function extractTokenFields () {
		if (empty($this->signature) || empty($this->post_token)) {
			$html = $this->httpGet('/Compose.aspx');
			if (preg_match(OrkutInviter_POSTTOKEN_REGEX,$html,$matches)==false) {
				//Failed to obtain POST_TOKEN
				return false;
			}
			$this->post_token = $matches[1];
			if (preg_match(OrkutInviter_SIGNATURE_REGEX,$html,$matches)==false) {
				//Failed to obtain signature
				return false;
			}
			$this->signature = $matches[1];
		}
		return true;
	}

	//extract captcha from html, returns captcha if present, null if not found
	function extractCaptcha ($html) {
		if (preg_match(OrkutInviter_CAPTCHAIMG_REGEX,$html,$matches)!=0) {

			//Fail if captcha not wanted
			//if ($returnCaptcha==false) return false;

			$lastUrl2 = $this->lastUrl;

			$imageUrl = htmlentities2utf8($matches[1]);
			$imageUrl = $this->makeAbsolute($this->lastUrl,$imageUrl);

			//Download the image...to a file?
			$lu = $this->lastUrl;
			$img = $this->httpGet($imageUrl,null);


			//Generate random image file name
			//Orkut uses JPG images. We save with extension JPG
			$randname = dechex(time()).'-'.dechex(mt_rand(0,2147483647)).'.jpg';
			$folder = abi_captcha_filepath();
			$file = $folder.'/'.$randname;
			$uri = abi_captcha_uripath().'/'.$randname;
			//echo "[RANDNAME=$file,URI=$uri]";

			//Write captcha file
			//file_put_contents($file,$img);
			$fh = fopen($file,'w');
			fwrite($fh,$img);
			fclose($fh);

			//pathinfo($imageUrl);
			$captcha = new OrkutCaptcha;
			$captcha->type = "image";
			$captcha->url = $uri;
			$captcha->imageFile = $file;
			$res = oz_extract_forms($html);
			foreach ($res as $fo) {
				//We're looking for the form with hidden field Action.submit
				$hasActionSubmit = false;
				//if ($fo->name=='compose') {
				$fo->action = $this->makeAbsolute($lastUrl2,$fo->action);
				$action = $fo->action;
				$fields = $fo->fields;
				if (!empty($fields)) {
					foreach ($fields as $field) {
						if ($field->name=='hl') {
							$field->value = 'en-US';
							//$fo->addField('hl','en-US');
						}
						else if ($field->name=='Action.submit') {
							$hasActionSubmit=true;
							//$fo->addField($field->name,$field->value);
						}
						//else {
						//	$fo->addField($field->name,$field->value);
						//}
					}
				}
				if (!$hasActionSubmit) continue;

				$captcha->form = $fo;
				break;
				//}
			}

			$this->lastUrl = $lu;

			abi_set_captcha($captcha);
			return $captcha;
		}
		return null;
	}

	//returns true if successful, false if failed.
	//Remember to keep message short (less than 4000 characters)
	//@api
	function sendMessage ($uid, $subject, $message, $saveToSent = false) {

		//Older code takes in uid. Newer code takes in SocialContact object?
		if (oz_instanceof($uid,'SocialContact')) $uid = $uid->uid;

		if (!$this->extractTokenFields()) {
			return false;
		}
		$form = new HttpForm;
		$form->action = "http://www.orkut.com/Compose.aspx";
		if ($uid=='*') {
			$form->addField('sendTo','allFriends');
		}
		else {
			$form->addField('sendTo','user');
			$form->addField('uid',$uid);
		}
//echo "[ORKUT: SENDMESSAGE TO $uid : SUBJECT=$subject | MSG=$message]"		;
		$form->addField('subject',$subject);
		$form->addField('body',$message);
		$form->addField('POST_TOKEN',$this->post_token);
		$form->addField('signature',$this->signature);
		$form->addField("cs", "concap");
		$form->addField("friendGroup", "");
		$form->addField("oneFriend", "");
		$form->addField("itemName", "");
		$form->addField("displayName", "");
		$form->addField("email", "");
		$form->addField("cmm", "cmm");
		$form->addField("Action.submit", "Submit");
		$html = $this->postForm($form);


//TODO CHECK IF CAPTCHA WANTED
		//Test if captcha is required
		$captcha = $this->extractCaptcha($html);
		if (isset($captcha)) return $captcha;


		//No way of detecting failures
		return true;
	}

	//@api
	function sendIndividualMessages ($uids, $subject, $message, $saveToSent = false) {
		//Note: $uids is a copy of the original array used by caller
		$n = count($uids);
		$res = true;
		for ($i=0; $i<$n; $i++) {
			$uid = $uids[0];
			$r = $this->sendMessage($uid, $subject, $message, $saveToSent, false);
			if (oz_instanceof($r,'CaptchaChallenge')) {
				$r->remainingContacts = $uids;
				$r->subject = $subject;
				$r->message = $message;
				$r->remainingCount = count($uids);
				return $r;
			}
			else {
				$res &= $r;
				array_shift($uids);
			}
		}

		/*
		$res = true;
		foreach ($uids as $uid) {
			//Legacy code takes in array of uids (strings). Newer code takes in SocialContact object itself.

			$r = $this->sendMessage($uid, $subject, $message, $saveToSent, false);
			if (oz_instanceof($r,'OrkutCaptcha')) {
				if (_ABI_CAPTCHA) return $r;
				else return false;
			}
			else {
				$res &= $r;
			}
		}
		return $res;
		*/

		return $res==true;
	}


	//Returns true if captcha verification succeeded, false otherwise
	//Returns new captcha object if code was incorrect
	//@api
	function verifyCaptcha ($captcha) {
		$form = $captcha->form;
		$form->setField('cs',$captcha->answer);
		$postData = $form->buildPostData();
		$html = $this->httpPost($form->action, $postData);
		$captcha2 = $this->extractCaptcha($html);
		if (is_null($captcha2)) {
			// Delete the group if one exists
			if ($this->groupId != null) {
				$this->deleteGroup();
			}
			return true;
		}
		else {
			//Orkut's shoutout is now partial html. No form detectable.
			if (is_null($captcha2->form))
				$captcha2->form = $captcha->form;

			//Copy properties across
			$captcha2->subject = $captcha->subject;
			$captcha2->message = $captcha->message;
			$captcha2->remainingContacts = $captcha->remainingContacts;
			$captcha2->remainingCount = $captcha->remainingCount;

			return $captcha2;
		}
	}

	//@api
	function resumeFromCaptcha($captcha) {
		$cl = $captcha->remainingContacts;
		if ($cl!=null && count($cl)>1) {
			array_shift($cl);
			return $this->sendMessages($cl,$captcha->subject, $captcha->message, true);
		}
		else {
			return true;
		}
	}

//Orkut no longer allows "Send to all"
//	function postBulletin ($subject,$message) {
//	 	return $this->sendMessage('*',$subject,$message,false);
//	}

	//@api
	function postShoutOut ($message) {
		if (!$this->extractTokenFields()) return false;
		$form = new HttpForm;
		$form->addField('scrapText',$message);
		$form->addField('POST_TOKEN',$this->post_token);
		$form->addField('signature',$this->signature);
		$form->addField('Action.submit','Submit Query');
		$form->action = '/Scrapbook.aspx';
		$postData = $form->buildPostData();
		$html = $this->httpPost($form->action, $postData);

		//Test if captcha is required
		$captcha = $this->extractCaptcha($html);
		if (isset($captcha)) {
			//Orkut's shoutout is now partial html. No form detectable.
			if (is_null($captcha->form)) {
				$captcha->form = $form;
			}
			return $captcha;
		}


		//No way of detecting failures
		return true;
	}

	//@api
	function fetchContacts ($maxFetch=NULL, $maxPages=NULL, $includeUnapprovedContacts=false) {
	
		//Get max contacts, pages, duration to fetch contacts
		if ($maxFetch===NULL) $maxFetch = oz_get_config('limit.max_contacts',1000);
		if ($maxPages===NULL) $maxPages = oz_get_config('limit.max_pages',30);

		$html = $this->httpGet('/ShowFriends.aspx?show=all&pno=1');

		if (strpos($this->lastUrl, "SMSCaptcha")!==FALSE) {
			abi_set_error(_ABI_BLOCKED,'Profile locked. SMS verification needed');
			return FALSE;
		}

		//Loop
		$ids = array();
		$al = array();
		$this->id2cb = array();

		//The following will match "us". add it to list to avoid matching it.
		$ids[$this->orkutId] = $this->orkutId;

		//Allow up to 30 pages of contacts
		for ($i=0; $i<$maxPages; ++$i) {

			//Extract contacts on page
			preg_match_all(OrkutInviter_CONTACTHTML_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$chtml = $val[1];

				$uid = preg_match(OrkutInviter_CONTACTUID_REGEX,$chtml,$matches2)!=0 ? htmlentities2utf8($matches2[1]) : null;
				$name = preg_match(OrkutInviter_CONTACTNAME_REGEX,$chtml,$matches2)!=0 ? htmlentities2utf8($matches2[1]) : null;
				$email = preg_match(OrkutInviter_CONTACTEMAIL_REGEX,$chtml,$matches2)!=0 ? htmlentities2utf8($matches2[1]) : null;
				if (!abi_valid_email($email)) $email=NULL;
				$imageurl = null;
				if (preg_match(OrkutInviter_CONTACTIMAGE_REGEX,$chtml,$matches2)!=0) {
					$imageurl = $matches2[1];
					if (empty($imageurl)) $imageurl = $matches2[2];
					if (empty($imageurl)) $imageurl = $matches2[3];
					if ($imageurl!=null) $imageurl = htmlentities2utf8($imageurl);
				}
				$cb = preg_match(OrkutInviter_CONTACTCB_REGEX,$chtml,$matches2)!=0 ? trim(htmlentities2utf8($matches2[1])) : null;
				if ($uid!=null || $includeUnapprovedContacts==true) {
					$contact = new OrkutContact($uid,$name,$imageurl,$email,$cb);
					$al[] = $contact;
					//Add mapping from id -> cb
					if ($cb!==NULL) $this->id2cb[$uid]=$cb;
				}
				if (count($al)>=$maxFetch) break;
			}
			if (count($al)>=$maxFetch) break;
			if ($i+1>=$maxPages) break;

			//Get next page uri to jump to
			$nextPageUri = null;
			if (preg_match(OrkutInviter_NEXTPAGE2_REGEX,$html,$matches)) {
				$nextPageUri = htmlentities2utf8($matches[1]);
				$nextPageUri = $this->makeAbsolute($this->lastUrl, $nextPageUri);
			}
			//If we're at the last/only page, then exit
			if (empty($nextPageUri)) {
				break;
			}
			$html = $this->httpGet($nextPageUri);
		}

		return $al;
	}




	var $groupId;

	function deleteGroup() {
		if ($this->groupId!==NULL) {
			$form = new HttpForm;
			$form->action = "/ShowFriends";
			$form->addField("Action.deleteGroup", "1");
			$form->addField("groupId", $this->groupId);
			$form->addField("groupName", OrkutInviter_GROUPNAME);
			$form->addField("POST_TOKEN", $this->post_token);
			$form->addField("signature", $this->signature);
			$html = $this->postForm($form);
	
			// If success, then first text should be "ok".
			$html = trim($html);
			$i = strpos($html,'<');
			if ($i!==FALSE) $html=trim(substr($html,0,$i));
			if ($html!='ok') {
				return abi_set_error(_ABI_FAILED,'Failed to delete grouop '.OrkutInviter_GROUPNAME);
			}
			$this->groupId = null;
		}
	}

	function createGroup() {
		$form = new HttpForm;
		$form->action = "/ShowFriends";
		$form->addField("Action.addGroup", "1");
		$form->addField("groupName", OrkutInviter_GROUPNAME);
		$form->addField("POST_TOKEN", $this->post_token);
		$form->addField("signature", $this->signature);
		$html = $this->postForm($form);
		if (strpos($html,'error')!==FALSE) {
			return abi_set_error(_ABI_FAILED,'Group '.OrkutInviter_GROUPNAME.' arleady exist?');
		}
		if (!preg_match(OrkutInviter_NEWGROUPID_REGEX,$html,$matches)) {
			return abi_set_error(_ABI_FAILED,'Cannot create or find created group '.OrkutInviter_GROUPNAME);
		}
		$this->groupId = $matches[1];
	}

	//@api
	function sendMessages ($uids, $subject, $message, $saveToSent = false) {
	 
		// If single contact, then use traditional method
		if (count($uids)<=1) 
			return $this->sendIndividualMessages(contacts, subject, message);

		if (!$this->extractTokenFields()) {
			abi_set_error(_ABI_FAILED,'Cannot extract tokens');
			return false;
		}

		// //////////////////////////////////////////////////////
		// STEP 1: DELETE EXISTING GROUP, AND RECREATE NEW GROUP
		// //////////////////////////////////////////////////////
		$html = $this->httpGet("/ShowFriends.aspx?show=all&pno=1");
		if (preg_match(OrkutInviter_GROUPID_REGEX,$html,$matches)) {
			$this->groupId = $matches[1];
			$this->deleteGroup();
		} 
		$this->createGroup();

		// //////////////////////////////////////////////////////
		// STEP 2: ADD USERS TO GROUP. SHOULD WE BATCH THIS UP?
		// //////////////////////////////////////////////////////
		$n = count($uids);
		for ($i = 0; $i < $n; $i += OrkutInviter_ADDGROUP_BATCH_SIZE) {
			$form = new HttpForm;
			$form->action = "/ShowFriends";
			$form->addField("POST_TOKEN", $this->post_token);
			$form->addField("signature", $this->signature);
			$form->addField("sec1-groupName", "");
			$form->addField("inviteEmail", "email address");
			$form->addField("email+address", "");
			$form->addField("edit-lastname-input", "");
			$form->addField("edit-email-input", "");
			$form->addField("groupSelection.submitted", "1");
			$form->addField("sec0-groupName", "");
			$form->addField("contactName", "");
			$form->addField("contactEmail", "");
			$form->addField("contactPhone", "");
			$form->addField("contactMobile", "");
			$form->addField("searchFriends", "search my friends");
			$form->addField("actionMenu", "addToGroup:" + $this->groupId);
			$upperLimit = min($i + OrkutInviter_ADDGROUP_BATCH_SIZE, $n);
			for ($j = $i; $j < $upperLimit; $j++) {
				$osc = $uids[$j];
				$cb = NULL;
				if (oz_instanceof($osc,'OrkutContact')) {
				 	$cb = $osc->cb;
				}
				else {
					$cb = isset($this->id2cb[$osc]) ? $this->id2cb[$osc] : NULL;
				}
				if ($osc!==NULL) {
					$form->addField("friendCheckbox", $cb);
				}
			}
			$form->addField("Action.addToGroup", "");
			$form->addField("groupId", $this->groupId);
			$html = $this->postForm($form);
		}

		// No way to test success of this?

		// //////////////////////////////////////////////////////
		// STEP 4: SEND MESSAGE TO GROUP
		// //////////////////////////////////////////////////////
		$form = new HttpForm;
		$form->action = "/Compose.aspx";
		$form->addField("POST_TOKEN", $this->post_token);
		$form->addField("signature", $this->signature);
		$form->addField("itemName", OrkutInviter_GROUPNAME);
		$form->addField("oneFriend", "");
		$form->addField("sendTo", "friendGroup");
		$form->addField("friendGroup", $this->groupId);
		$form->addField("subject", $subject);
		$form->addField("body", $message);
		$form->addField("Action.submit", "Submit");
		$html = $this->postForm($form);

		$captcha = $this->extractCaptcha($html);
		if (isset($captcha)) return $captcha;

		$this->deleteGroup();
		
		return true;
	}


}
