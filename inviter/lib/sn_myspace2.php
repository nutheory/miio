<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

MySpace Invite Sender 2 (using MySpace mobile)

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['is_myspacemobile'] = array('type'=>'is', 'label'=>'MySpace', 'class'=>'MySpaceMobileInviter');

/////////////////////////////////////////////////////////////////////////////////////////
//MySpaceMobileInviter
/////////////////////////////////////////////////////////////////////////////////////////
//@api
class MySpaceMobileContact extends SocialContact {
	function MySpaceContact ($uid, $name, $imgurl) {
		parent::SocialContact($uid, $name, $imgurl);
	}
}

//@api
class MySpaceMobileCaptcha extends CaptchaChallenge {
	var $imageFile;
	var $form;
	var $responseFieldName;

	var $remainingContacts;
	var $subject;
	var $message;
}


define('MySpaceMobileInviter_CONTACT_REGEX',"/<div\\s+class=\"(?:(?:listItem)|(?:alternatingListItem))\".*?<img[^>]*?src=\"([^\"]*)\".*?<a\\s+href=\"[^\"]*friendid=(\\d+)[^>]*>([^<]*)/ims");
define('MySpaceMobileInviter_NEXTPAGE_REGEX',"/<a\\s+href=\"([^\"]*)\"[^>]*>\\s*<img\\s+src=\"[^\"]*nextArrow.gif\"/ims");
define('MySpaceMobileInviter_CAPTCHA_REGEX',"/<img\\s+src=\"([^\"]*)\"\\s+alt=\"Captcha\"/ims");

//@api
class MySpaceMobileInviter extends WebRequestor {

	//@api
	function getInfo () {
		return array('id'=>'myspace');
	}

	//@api
	function logout () {
		if (!empty($this->uid) && !empty($this->token)) {
			$url = "/signout.wap?useimages=True&bfd=offdeck&".$this->token."&friendid=".$this->uid;
			$this->httpGet($url);
			$this->uid=NULL;
			$this->token=NULL;
		}
	}
	
	//@api
	function login ($email, $password) {
		oz_set_domain('myspace');

		$html = $this->httpGet("http://m.myspace.com/login.wap?bfd=offdeck");
		$form = oz_extract_form_by_id($html, "aspnetForm");
		if ($form==null) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find login form');
		}
		$form->setField("emailTextBox", $email);
		$form->setField("passwordTextBox", $password);
		$html = $this->postForm($form);
		if (strpos($html,"invalidLoginLabel")!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
		}

		return abi_set_success();
	}

	//@api
	function fetchContacts ($maxFetch=NULL, $maxPages=NULL) {

		//Get max contacts, pages, duration to fetch contacts
		if ($maxFetch===NULL) $maxFetch = oz_get_config('limit.max_contacts',1000);
		if ($maxPages===NULL) $maxPages = oz_get_config('limit.max_pages',30);


		$url = "/friends/friendlist.wap?bfd=offdeck";
		
		$list = oz_get_config('myspace.filter', 'all');
		if ($list=='top') {
			$url.= "&typeSelect=Top";
			// Online, New, Top
		}

		$html = $this->httpGet($url);

		
		//Loop
		$ids = array();
		$al = array();
		//Allow up to 30 pages of contacts
		for ($i=0; $i<$maxPages; ++$i) {

			//Extract contacts on page
			preg_match_all(MySpaceMobileInviter_CONTACT_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$uid = trim($val[2]);
				if (!isset($ids[$uid])) {
					$ids[$uid] = $uid;
					$imgurl = htmlentities2utf8(trim($val[1]));
					$name = htmlentities2utf8(trim($val[3]));
					//Only add valid contacts, exclude Tom
					if (strpos($imgurl,'deleteduser.gif')===FALSE && $uid!='6221') {
						if (empty($imgurl)) $imgurl='http://x.myspacecdn.com/modules/common/static/img/no_pic.gif';
						//else $imgurl = $this->makeAbsolute($this->lastUrl,$imgurl);
						$contact = new MySpaceContact($uid,$name,$imgurl);
						$al[] = $contact;
						if (count($al)>=$maxFetch) break;
					}
				}
			}
			if (count($al)>=$maxFetch) break;
			if ($i+1 >= $maxPages) break;
		 
			//Get next page uri to jump to
			//$nextPageUri = null;
			if (preg_match(MySpaceMobileInviter_NEXTPAGE_REGEX,$html,$matches)==0) {
				 //No more contacts
				break;
			}
			$url = htmlentities2utf8(trim($matches[1]));
			$html = $this->httpGet($url);
		}

		$this->close();
		return $al;
	}

	function _extractCaptcha ($html) {
		if (preg_match(MySpaceMobileInviter_CAPTCHA_REGEX,$html,$matches)!=0) {
			$lastUrl2 = $this->lastUrl;
			$imageUrl = htmlentities2utf8($matches[1]);
			$imageUrl = $this->makeAbsolute($this->lastUrl,$imageUrl);

			$form = oz_extract_form_by_id($html, "aspnetForm");
			if ($form==NULL) {
				abi_set_error(_ABI_FAILED, 'Cannot find captcha form');
				return null;
			}
			
			//Download the image...to a file
			$lu = $this->lastUrl;
			$img = $this->httpGet($imageUrl,null);

			//Generate random image file name	
			//MySpace uses JPG images. We save with extension JPG
			$randname = dechex(time()).'-'.dechex(mt_rand(0,2147483647)).'.jpg';
			$folder = abi_captcha_filepath();
			$file = $folder.'/'.$randname;
			$uri = abi_captcha_uripath().'/'.$randname;
			//Write captcha file
			$fh = fopen($file,'w');
			fwrite($fh,$img);
			fclose($fh);

			$this->lastUrl = $lu;

			$captcha = new MySpaceMobileCaptcha;
			$captcha->type = "image";
			$captcha->url = $uri;
			$captcha->imageFile = $file;
			$captcha->form = $form;
			$captcha->responseFieldName = 'cvt';
			abi_set_captcha($captcha);
			return $captcha;
		}
		return null;
	}
	
	//@api
	function postBulletin ($subject, $message) {

		$subject = substr($subject,0,128);

		$url = "/messaging/createmessage.wap?bfd=offdeck&folderid=16&messageType=0&action=13&referringpage=Bulletins%253fbfd%253doffdeck";
		$html = $this->httpGet($url);
		$form = oz_extract_form_by_name($html, "aspnetForm");
		if ($form == null) {
			abi_set_error(_ABI_FAILED, 'Cannot find compose form');
			return false;
		}
		$form->setField("subject", $subject);
		$form->setField("fb", $message);
		$html = $this->postForm($form);
		
		$captcha = $this->_extractCaptcha($html);
		if ($captcha != NULL) {
			$captcha->subject = $subject;
			$captcha->message = $message;
			return $captcha;
		}

		$html = $this->postForm($form);
		return strpos($html,"style=\"color:Red")===FALSE;
	}
		
	//returns true if successful, false if failed.
	//Remember to keep message short (less than 4000 characters)
	//@api
	function sendMessage ($uid, $subject, $message, $saveToSent = false) {

		if (oz_instanceof($uid,'SocialContact')) $uid = $uid->uid;
		
		$subject = substr($subject,0,128);

		$url = "/messaging/createmessage.wap?friendid=".$uid."&bfd=offdeck&folderid=-1";
		$html = $this->httpGet($url);
		$form = oz_extract_form_by_name($html, "aspnetForm");
		if ($form == null) {
			abi_set_error(_ABI_FAILED, 'Cannot find compose form');
			return false;
		}
		$form->setField("subject", $subject);
		$form->setField("fb", $message);
		$html = $this->postForm($form);
		
		$captcha = $this->_extractCaptcha($html);
		if ($captcha != NULL) {
			$captcha->subject = $subject;
			$captcha->message = $message;
			return $captcha;
		}

		$html = $this->postForm($form);
		return strpos($html,"style=\"color:Red")===FALSE;
	}

	//@api
	function sendMessages ($uids, $subject, $message, $saveToSent = false) {
		//Note: $uids is a copy of the original array used by caller
		$n = count($uids);
		$res = true;
		for ($i=0; $i<$n; $i++) {
			$uid = $uids[0];
			$r = $this->sendMessage($uid, $subject, $message, $saveToSent, false);
			if (oz_instanceof($r,'CaptchaChallenge')) {
				$r->remainingContacts = $uids;
				$r->subject = $subject;
				$r->message = $message;
				$r->remainingCount = count($uids);
				return $r;	
			}
			else {
				$res &= $r;
				array_shift($uids);
			}
		}
		return $res==true;
	}
	

	
	//Returns true if captcha verification succeeded, false otherwise
	//Returns new captcha object if code was incorrect
	//@api
	function verifyCaptcha ($captcha) {
	 
		//Remove spaces for myspace captcha
		$captcha->answer = str_replace(' ','',$captcha->answer);
		$form = $captcha->form;
		$form->setField($captcha->responseFieldName,$captcha->answer);
		$form->setField("subject", $captcha->subject);
		$form->setField("fb", $captcha->message);			
		$html = $this->postForm($form);
	
		$form = oz_extract_form_by_name($html, "aspnetForm");
		if ($form==NULL) {
			abi_set_captcha(NULL);
			return true;
		}
		$captcha2 = $this->_extractCaptcha($html,$form);
		if ($captcha2==NULL) {
			return true;			
		}
		else {
			//Copy properties across
			$captcha2->subject = $captcha->subject;
			$captcha2->message = $captcha->message;
			$captcha2->remainingContacts = $captcha->remainingContacts;
			$captcha2->remainingCount = $captcha->remainingCount;
			return $captcha2;
		}
	}

	//@api
	function resumeFromCaptcha($captcha) {
		$cl = $captcha->remainingContacts;
		if ($cl!=null && count($cl)>1) {
			array_shift($cl);
			return $this->sendMessages($cl,$captcha->subject, $captcha->message);
		}
		else {
			return true;
		}
	}

	//@api
	function postShoutOut ($message) {
		// HARDCODED FOR NOW
		$mood = "";

		$html = $this->httpGet("/mood.wap?bfd=offdeck");
		$form = oz_extract_form_by_name($html, "aspnetForm");
		if ($form == null) {
			abi_set_error(_ABI_FAILED,'Cannot find status form');
			return false;
		}
		$form->setField("us", $message);
		$form->setField("mn", $mood);
		$form->setField('ctl00$WapPageBody$', "chipper.gif"); // "happy.gif"
		$form->setField("submit", "Save");
		$html = $this->postForm($form);
		return true;
	}
	
	//@api
	function postBlog ($subject, $message) {

		$html = $this->httpGet("/blog/createblog.wap?bfd=offdeck");
		$form = oz_extract_form_by_name($html, "aspnetForm");
		if ($form == null) {
			abi_set_error(_ABI_FAILED,'Cannot find blog form');
			return false;
		}		
		$form->setField("subject", subject);
		$form->setField("body", message);
		$form->setField("blogCategory", "0"); // 0=None, 5=Web,HTML,Tech
		$form->setField("moodSelect", "0"); // 0=None, 41=Excited,
		$form->setField("typeSelect", "0"); // 0=Public, 1=Diary, 2=Friends, 3=Preferred list
		$form->setField('ctl00$WapPageBody$submitNewBlog', "Post");
		$html = $this->postForm($form);
		return strpos($html,"class=\"error\"")===FALSE;
	}

}
