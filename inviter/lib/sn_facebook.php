<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Facebook friends list importer and invite sender
Using Facebook Mobile

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['is_facebook'] = array('type'=>'is', 'label'=>'Facebook', 'class'=>'FacebookInviter');

/////////////////////////////////////////////////////////////////////////////////////////
//FacebookInviter
/////////////////////////////////////////////////////////////////////////////////////////
//@api
class FacebookContact extends SocialContact {
	function FacebookContact ($uid, $name, $imgurl) {
		parent::SocialContact($uid, $name, $imgurl);
	}
}

//@api
class FacebookCaptcha extends CaptchaChallenge {
	//var $challengeCode;
	//var $postUrl;
	var $form;

	var $ids;
	var $remainingContacts;
	var $subject;
	var $message;

}

define('FacebookInviter_POSTFORMID_REGEX',"/<input.*?name=\"post_form_id\" value=\"([^\"]*)\"[^>]*>/ims");
define('FacebookInviter_CAPTCHACODE_REGEX',"/captcha_challenge_code\\\\x22 value=\\\\x22([^\\\\]+)\\\\x22/ims");
define('FacebookInviter_JSFRIEND_REGEX',"/<div class=\"ffriend[^\"]*\" id=\"f\\d*\".*?<img src=\"([^\"]*)\".*?<a href=\"[^\"]*?profile\\.php\\?id=(\\d*)\" class=\"fname\"[^>]*>\\s*([^<]*)\\s*</ims");
define('FacebookInviter_RECAPTCHA_CHALLENGE_REGEX',"/challenge : '([^']*)'/ims");
define('FacebookInviter_SEARCHSRC_REGEX',"/new\\s+search_friend_source\\s*\\(&quot;(.*?)&quot;\\)/ims");
//define('FacebookInviter_LOGOUT_REGEX',"/\"(http:\/\/www\\.facebook\\.com\/logout\\.php\\?h=[^\"]*)\"/ims");
//define('FacebookInviter_WALL_ACTION_REGEX',"/action=\"(\/wall\\.php[^\"]*)\"/ims");
//define('FacebookInviter_STATUS_ACTION_REGEX',"/action=\"(\/a\/home\\.php[^\"]*)\"/ims");

define('FacebookInviter_COMPOSE_ID_REGEX',"/__UIControllerRegistry\\[\\\\\"([0-9a-f]*)\\\\\"]/ims");
define('FacebookInviter_DTSG_REGEX',"/fb_dtsg:\"([^\"]*)\"/ims");

define('FacebookInviter_TOKENS_REGEX',"/<input[^>]*?name=\"fb_dtsg\"\\s+value=\"([^\"]*)\".*?<input[^>]*?name=\"post_form_id\"\\s+value=\"([^\"]*)\"/ims");
define('FacebookInviter_CONTACT_REGEX',"/<tr\\s+valign=\"top\"[^>]*>\\s*<td>\\s*<img\\s+src=\"(http:\/\/[^\"]*)\".*?<a\\s+href=\"\/profile\\.php\\?.*?id=(\\d+)[^>]*>([^<]*)/ims");


//@api
class FacebookInviter extends WebRequestor {

	var $BATCH_SIZE = 20;

	var $memberId = null;
	var $postFormId = null;
	//var $logoutUrl = null;

	var $wallMessage = '';
	var $dtsg = null;

	//@api
	function getInfo () {
		return array('id'=>'facebook');
	}

	//@api
	function login ($email, $password) {
		oz_set_domain('facebook');

		$html = $this->httpGet("http://m.facebook.com");

		// Get the first form
		$forms = oz_extract_forms($html);
		if (count($forms)==0) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find login form');
		}
		$form = $forms[0];
		$form->setField('email',$email);
		$form->setField('pass',$password);
		$form->setField('login','Log In');
		$html = $this->postForm($form);

		// TODO: ERROR?
		if (strpos($this->lastUrl,"login.php")!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}

		if (!preg_match(FacebookInviter_TOKENS_REGEX,$html,$matches)) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find tokens');
		}
		$this->dtsg = $matches[1];
		$this->postFormId = $matches[2];

		return abi_set_success();
	}

	//@api
	function logout () {
		$this->httpGet('http://m.facebook.com/logout.php');
	}
	
	function randomNumber() {
		return 'r'.dechex(rand(1,99999999));
	}

	//@api
	function fetchContacts ($maxFetch=NULL, $maxPages=NULL) {

		//Get max contacts, pages, duration to fetch contacts
		if ($maxFetch===NULL) $maxFetch = oz_get_config('limit.max_contacts',1000);
		if ($maxPages===NULL) $maxPages = oz_get_config('limit.max_pages',30);

		if (oz_get_config('facebook.post_to_wall_only',true)) {
			$al = array();
			$al[] = new FacebookContact('','My Wall','http://static.ak.fbcdn.net/pics/q_silhouette.gif');
			return $al;
		}

		$b1 = $this->useHttp1_1;
		
		//Loop
		$cl = array();
		$uids = array();
		
		for ($i=0,$from=0; $i<$maxPages; $i++) {

			$url = "http://m.facebook.com/friends.php?".$this->randomNumber()."&a&refid=5&f=".$from;
			$html = $this->httpGet($url);
			
			$c = 0;
			preg_match_all(FacebookInviter_CONTACT_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$image = htmlentities2utf8($val[1]);
				$uid = htmlentities2utf8($val[2]);
				$name = htmlentities2utf8($val[3]);

				if (!isset($uids[$uid])) {
				 	$cl[]= new FacebookContact($uid,$name,$image);
				 	$uids[$uid]=1;
				 	$c++;
				}
			}
			if ($c!=10) break;
			$from+=10;
		}

		$this->useHttp1_1 = $b1;
		return $cl;
	}

	//returns true if successful, false if failed.
	//does not support captcha
	//@api
	function sendMessage ($uid, $subject, $message, $saveToSent = false) {
		$uids = array();
		$uids[] = $uid;
		$res = $this->sendMessages($uids, $subject, $message, $saveToSent);
		//if (oz_instanceof($res,'CaptchaChallenge') && !$returnCaptcha) {
		//	return _ABI_FAILED;
		//}
		return $res;
	}

	//@api
	function sendMessages ($uids, $subject, $message, $saveToSent = false) {

		if (oz_get_config('facebook.post_to_wall_only',true)) {
			if ($message==$this->wallMessage) return true;
			$res = $this->postBulletin ('',$message);
			$this->wallMessage = $message;
			return $res;
		}

		//// Test to trigger a captcha
		//$uids = array();
		//$uids[] = new SocialContact("515758451","name","url");

		// Send in batches of 8
		$res = true;
		$start = 0;
		$maxRecipientsPerMessage = $this->BATCH_SIZE;
		$c = count($uids);
		while ($start < $c) {
			$n = $start + $maxRecipientsPerMessage;
			if ($n > $c) $n = $c;
			$res = $this->internalSendMessages($uids, $start, $n, $subject, $message);

			if (oz_instanceof($res,'FacebookCaptcha')) {
				$remaining = array_slice($uids, $start);
				$res->remainingContacts = $remaining;
				return $res;
			}

			if ($res === false) // || oz_instanceof($res,'FacebookCaptcha'))
				return $res;
			$start = $n;
		}
		return true;
	}

	//returns true if successful, false if failed.
	//Send a message to multiple recipients
	function internalSendMessages ($uids, $startIndex, $endIndex, $subject, $message) {

 		$r = $this->maxRedirects;
 		$this->maxRedirects = 0;
 		
		$form = new HttpForm;
		$form->action = "http://m.facebook.com/a/inbox/?".$this->randomNumber()."&refid=11";
		$form->addField("fb_dtsg", $this->dtsg);
		$form->addField("post_form_id", $this->postFormId);
		$form->addField("compose", "1");
		$sb = '';
		for ($j=0,$i=$startIndex; $i<$endIndex;$i++,$j++) {
			$uid = $uids[$i];
 			if (oz_instanceof($uid,'SocialContact')) $uid = $uid->uid;
 			if (strlen($sb)>0) $sb.=',';
 			$sb.=$uid;
		}
		$form->addField("ids", $sb);
		$form->addField("subject", $subject);
		$form->addField("body", $message);
		$form->addField("send", "Send");
		$html = $this->postForm($form);

 		$this->maxRedirects = $r;

		return strpos($html,"This Message Contains Blocked Content")===FALSE;
	}

	//@api
	function postShoutOut ($message) {
	 
 		$r = $this->maxRedirects;
 		$this->maxRedirects = 0;

		$form = new HttpForm;
		$form->action = 'http://m.facebook.com/a/home.php?'.$this->randomNumber().'=&refid=7';
		$form->addField('fb_dtsg',$this->dtsg);
		$form->addField('post_form_id',$this->postFormId);
		$form->addField('status',$message);
		$form->addField('update','Update Status');
		$this->postForm($form);
		
 		$this->maxRedirects = $r;

		//Cannot differentiate failure
		return true;
	}

	//@api
	function postBulletin ($subject,$message) {
 		$r = $this->maxRedirects;
 		$this->maxRedirects = 0;
 		
		$form = new HttpForm;
		$form->action = 'http://m.facebook.com/wall.php?'.$this->randomNumber().'=&refid=20';
		$form->addField('fb_dtsg',$this->dtsg);
		$form->addField('post_form_id',$this->postFormId);
		$form->addField('comment',$message);
		$form->addField('post','Post');
		$html = $this->postForm($form);
		
 		$this->maxRedirects = $r;
		
		return strpos($html,"This Message Contains Blocked Content")===FALSE;
	}

}




