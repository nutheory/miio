<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Twitter invite sender

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['is_twitter'] = array('type'=>'is', 'label'=>'Twitter', 'class'=>'TwitterInviter');

/////////////////////////////////////////////////////////////////////////////////////////
//TwitterInviter
/////////////////////////////////////////////////////////////////////////////////////////

//define('TwitterInviter_AT_REGEX',"/<input[^>]*?name=\"authenticity_token\"[^>]*?value=\"([^\"]*)\"/ims");
define('TwitterInviter_CURSOR_REGEX',"/\"next_cursor\":\\s*(\\d+)\\s*,/ims");

//@api
class TwitterInviter extends WebRequestor {

	var $uid;
	var $extraHeaders;

	//@api
	function getInfo () {
		return array('id'=>'twitter');
	}

	//@api
	function login ($userId, $password) {
		oz_set_domain('twitter');
		$userId = strtolower($userId);
		
		//$this->uid = $userId;

/*
		$html = $this->httpGet("http://www.twitter.com/");
		if (!preg_match(TwitterInviter_AT_REGEX,$html,$matches)) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find authenticity token');
		}
		$at = htmlentities2utf8($matches[1]);

		$form = new HttpForm;
		$form->action = "https://twitter.com/sessions";
		$form->addField("session[username_or_email]", $userId);
		$form->addField("session[password]", $password);
		$form->addField("authenticity_token", $at);
		$html = $this->postForm($form);

		if ($this->lastStatusCode != 200) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Unexpected response code');
		}

		// Check if the login form field is present. If it is, it means login
		// failed.
		if (strpos($html,"session[username_or_email]")!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
		}
*/
		// Create basic http authentication header
		$basicauth = base64_encode($userId.':'.$password);
		$this->extraHeaders = array();
		$this->extraHeaders[] = "Authorization: Basic $basicauth";

		//Test authentication correct?		
		$json = $this->httpRequest('http://twitter.com/statuses/destroy/justatest1.json',false,null,null,$this->extraHeaders);
		if ($this->lastStatusCode == 401) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
		}
		
		return abi_set_success();
	}

	//@api
	function logout () {
	}

	//@api
	function fetchContacts ($maxFetch=NULL, $maxPages=NULL) {
	
		//Get max contacts, pages, duration to fetch contacts
		if ($maxFetch===NULL) $maxFetch = oz_get_config('limit.max_contacts',10000);
		if ($maxPages===NULL) $maxPages = oz_get_config('limit.max_pages',30);
	
		$cursor = "-1";
			
		$al = array();
		for ($page=1; $page<$maxPages; ++$page) {

			$url = 'http://twitter.com/statuses/followers.json?cursor='.$cursor;
			$json = $this->httpRequest($url,false,null,null,$this->extraHeaders);
			if ($this->lastStatusCode != 200) {
				$this->close();
			 	if ($this->lastStatusCode==401) return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad username or password');
				else return abi_set_error(_ABI_FAILED,'Cannot retrieve followers');
			}
			
			// Twitter using 64-bit numerics for cursor value! JS only handles floats.
			$cursor = "0";
			if (preg_match(TwitterInviter_CURSOR_REGEX,$json,$matches))
			 	$cursor = trim($matches[1]);

			$jv = oz_json_decode($json,true);
			$jcl = $jv['users'];
			$n = count($jcl);
			if ($n==0) break;
			for ($i=0;$i<$n;$i++) {
				$cv = $jcl[$i];
				$uid = isset($cv['screen_name']) ? $cv['screen_name'] : '';
				$image = isset($cv['profile_image_url']) ? $cv['profile_image_url'] : '';
				$name = isset($cv['name']) ? $cv['name'] : '';
				$al[] = new SocialContact($uid,$name,$image);
				if (count($al)>=$maxFetch) break;
			}
			if ($cursor===NULL || $cursor=='0') break;
		}
		return $al;
	}

	//@api
	function sendMessage ($uid, $subject, $message, $saveToSent = false) {
		if (oz_instanceof($uid,'SocialContact')) $uid = $uid->uid;
		$form = new HttpForm;
		$form->action = "http://twitter.com/direct_messages/new.json";
		$form->addField("user", $uid);
		$form->addField("text", $message);
		$json = $this->httpRequest($form->action,true,$form->buildPostData(),null,$this->extraHeaders);
		return $this->lastStatusCode == 200;
	}

	//@api
	function sendMessages ($uids, $subject, $message, $saveToSent = false) {
		$res = true;
		foreach ($uids as $uid) {
			$res &= $this->sendMessage($uid, $subject, $message, $saveToSent, false);
		}
		return $res==true;
	}

	//@api
	function postShoutOut ($message) {
		$form = new HttpForm;
		$form->action = "http://twitter.com/statuses/update.json";
		$form->addField("status", $message);
		$json = $this->httpRequest($form->action,true,$form->buildPostData(),null,$this->extraHeaders);
		return $this->lastStatusCode == 200;
	}

}
