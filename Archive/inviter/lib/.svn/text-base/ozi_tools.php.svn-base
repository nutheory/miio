<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Unified Inviter Component

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved.
WWW: http://www.octazen.com
********************************************************************************/
if (!defined('__ABI')) die('Please include abi.php to use this inviter component!');

function ozi_get_config($key,$default=NULL) {global $_OZ_CONFIG;return isset($_OZ_CONFIG[$key]) ? $_OZ_CONFIG[$key] : $default;}
function ozi_set_config($key,$value) {global $_OZ_CONFIG;return $_OZ_CONFIG[$key]=$value;}


//function ozi_include ($file) {if (file_exists($file)) include($file);}


//Get current absolute url
function oz_get_current_url() {
   if (isset($_SERVER['HTTP_X_FORWARDED_PROTO'])) {
       $pageURL = $_SERVER['HTTP_X_FORWARDED_PROTO'];
   } else {
       $pageURL = 'http';
       if (isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == "on") $pageURL .= "s";
   }
   $pageURL .= "://";
//	if ($_SERVER["SERVER_PORT"] != "80") $pageURL .= $_SERVER["HTTP_HOST"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
//	else $pageURL .= $_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"];
	$pageURL .= $_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"];
	return $pageURL;
}

/*
function oz_get_current_url ()
{
	//$name = $_SERVER['SERVER_NAME'];
	//Windows Live Login cannot accept "localhost", but accepts "127.0.0.1"
	//echo "NAME=$name";
	//if ($name=='localhost') $name='127.0.0.1';
	//return 'http://'.$name.$_SERVER['REQUEST_URI'];
	//return 'http://'.$name.':'.$_SERVER['SERVER_PORT'].$_SERVER['REQUEST_URI'];
	return 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
}
*/



//Determine if user is running php 5 or higher
function ozi_is_php5() {
	static $php5;
	if (!isset($php5)) $php5 = version_compare(phpversion(),"5.0.0",">=");
	return $php5;
}


function ozi_parse_url ($url) {
    $r  = '!(?:(\w+)://)?(?:(\w+)\:(\w+)@)?([^/:?#]+)?(?:\:(\d*))?([^#?]+)?(?:\?([^#]+))?(?:#(.+$))?!i';
    if (preg_match ( $r, $url, $out )==0) return FALSE;
    $res = array();
    if (!empty($out[1])) $res['scheme'] = $out[1];
    if (!empty($out[2])) $res['user'] = $out[2];
    if (!empty($out[3])) $res['pass'] = $out[3];
    if (!empty($out[4])) $res['host'] = $out[4];
    if (!empty($out[5])) $res['port'] = $out[5];
    if (!empty($out[6])) $res['path'] = $out[6];
    if (!empty($out[7])) $res['query'] = $out[7];
    if (!empty($out[8])) $res['fragment'] = $out[8];
    return $res;
}



function ozi_make_absolute_url($absolute, $relative) 
{
	//If relative is an absolute path, return it
	if (empty($relative)) $relative=$absolute;
    $p = ozi_parse_url($relative);
    
    if(isset($p["scheme"])) return $relative;
    $path = isset($p["path"]) ? $p["path"] : "";
    $path = dirname($path);
    extract(ozi_parse_url($absolute));
    if($relative{0} == '/') {
        $cparts = explode("/", $relative);
    }
    else {
        $aparts = explode("/", $path);
    	if (count($aparts)>0) array_pop($aparts);
        $rparts = explode("/", $relative);
        $cparts = array_merge($aparts, $rparts);
        foreach($cparts as $i => $part) {
            if($part == '.') $cparts[$i] = null;
            if($part == '..') {$cparts[$i - 1] = null;$cparts[$i] = null;}
        }
    }
	
	//Filter cparts, removing empty elements
	$res = array();
	foreach ($cparts as $v) if (strlen($v)>0) $res[] = $v;
	$cparts = $res;

	//##+kenfoo 14042007. Added proper handling of paths ending with a slash.
	//Earlier code dropped the final slash, causing problems with Facebook /inbox/.
    $n = strlen($relative);
    if ($n>0 && $relative[$n-1]=='/') $cparts[]='';
    
    $path = implode("/", $cparts);
    $url = "";
    if(isset($scheme)) $url = "$scheme://";
    if(isset($user)) {
        $url .= "$user";
        if($pass) $url .= ":$pass";
        $url .= "@";
    }
    if(isset($host)) {
		$url .= $host;
	    if(isset($port)) $url .= ":$port";
		$url .='/';
	}
    $url .= $path;
    return $url;

}



function ozi_valid_email($email) {
	if (!preg_match("/^([+=&'\/\\?\\^\\~a-zA-Z0-9\._-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-]+)+/", $email)) return false;
	return true;
}


function ozi_reduce_whitespace ($str) {
	$sb = '';
	$lastIsWhitespace = true;
	$n = strlen($str);
	for ($i=0; $i<$n; $i++) {
		$c = $str[$i];
		if ($c==' ' || $c=="\t" || $c=="\r" || $c=="\n") {
			if ($lastIsWhitespace==true) continue;
			$lastIsWhitespace = true;
		}
		else {
			$lastIsWhitespace = false;
		}
		$sb.=$c;
	}
	return trim($sb);
}

function ozi_new_ozinviter() {
	$inviter = new OzInviter;
	$inviter->setConfig(array(
		'limit.max_contacts' => ozi_get_config('limit.max_contacts',10000),
		'limit.max_pages' => ozi_get_config('limit.max_pages',30)
		)
	);
	return $inviter;
}



function ozi_get_default_select_limit($serviceId) {
	$limit = ozi_get_config('limit.max_selectable',-1);
	
	//Get limit by the social network
	if ($serviceId!==NULL && strpos($serviceId,'is_')===0) {
		$snlimit = ozi_get_config('limit.max_selectable.is',20);
		$limit2 = ozi_get_config('limit.max_selectable.'.$serviceId,NULL);
		$limit = empty($limit2) ? $snlimit:$limit2;
	}
	//Otherwise, use default limit
	return empty($limit) ? -1 : intval($limit);
}






//function oz_save_state($obj) {return base64_encode(gzcompress(serialize($obj)));}
//function oz_load_state($state) {return empty($state)?NULL:unserialize(gzuncompress(base64_decode($state)));}

function oz_get_temp_dir() {
 	$dir = ozi_get_config('tmpdir',NULL);
 	if (empty($dir)) {
 	 	//Try local directory named "tmp"
 	 	$dir = dirname(__FILE__).'/../tmp/';
 	 	if (file_exists($dir) && is_writable($dir)) {
		  	return $dir;	
		}
		elseif (function_exists('sys_get_temp_dir')) {
			$dir = sys_get_temp_dir();
		}
		else {
			$tf = tempnam('','ozs_');
			unlink($tf);
			$dir = dirname($tf);
		}
	}
	
	//Add '/' path separator if there isn't one
	$n = strlen($dir);
	$c = $dir[$n-1];
	if ($c!=='/' && $c!=='\\') $dir.='/';
	return $dir;
}
function oz_generate_state_filename() {return md5(uniqid(rand(), true));}

function oz_delete_state ($state_file) {
	if (empty($state_file)) return NULL;
	$s = str_replace(array('.','/','\\'),'',$state_file); //Safe name
	$filename = oz_get_temp_dir().'ozstate/'.$s;
	@unlink($filename);
}

function ozi_mkdirs($dir,$mode=0777) {
 	if (ozi_is_php5()) return mkdir($dir,$mode,TRUE);
 	if (file_exists($dir) || @mkdir($dir,$mode)) return true;
 	$parent = dirname($dir);
 	if ($parent==='/' || $parent===$dir) return false;
 	$res = ozi_mkdirs($parent,$mode) && mkdir($dir,$mode);
	if (!$res) return FALSE;
}

function oz_save_state($state_file,$obj) {
 	$dir = oz_get_temp_dir().'ozstate';
 	if (!file_exists($dir))	@ozi_mkdirs($dir);
	//chmod($dir,0777);
	$s = str_replace(array('.','/','\\'),'',$state_file); //Safe name
	$filename = $dir.'/'.$s;
	$f = fopen($filename,'w');
	if ($f!==FALSE)
	{
		$data = serialize($obj);
		fwrite($f,$data,strlen($data));
		fclose($f);
	}
	else {
		echo "Octazen Unified Inviter: Failed to write to temporary file $filename";
		flush();
		trigger_error("Failed to write to temporary file $filename",E_USER_ERROR);
	}

	//Housekeep old entries 1/10 of the time
	mt_srand(time());
	$r = rand(0,10);
	if ($r===1)
	{
		//Look for files in captcha folder. Delete anything older than 30 minutes old.
		$oldest = time()-(30*60);
		if ($handle = opendir($dir)) {
			while (false !== ($file = readdir($handle))) {
				if ($file!='.' && $file!='..')
				{
					$file = $dir.'/'.$file;
					$c = filemtime($file);
					if ($c<$oldest) {
						unlink($file);
					}
				}
			}
			closedir($handle);
		}
	}
}

function oz_load_state($state_file) {
	if (empty($state_file)) return NULL;
	$s = str_replace(array('.','/','\\'),'',$state_file); //Safe name
	$filename = oz_get_temp_dir().'ozstate/'.$s;
	$data = @file_get_contents($filename);
	if ($data===FALSE) return NULL;
	$obj = unserialize($data);
	return $obj;
}

/*
function ozi_state_get_param($key,$defaultValue=NULL) {
	global $_OZI_STATE;
	if ($_OZI_STATE && isset($_OZI_STATE->params[$key])) {
		return $_OZI_STATE->params[$key];
	}
	return $defaultValue;
}

function ozi_state_set_param($key,$value) {
	global $_OZI_STATE;
	if ($_OZI_STATE) $_OZI_STATE->params[$key]=$value;
}
*/

function oz_dabi_extract_contacts ($data) {
	$res = array();
	$lines = explode("\r\n",$data);
	$emails = array();
	foreach ($lines as $line) {
		$c = array();
		$pc = 0;
		$line = trim($line);
		$parts = explode('&',$line);
		foreach ($parts as $part) {
			$va = explode('=',$part,2);
			if (count($va)==2) {
				$key = $va[0];
				$value = urldecode($va[1]);
				$c[$key]=$value;
				$pc++;
			}
		}
		if ($pc>0) {
			//Get name
			//$name = isset($c['DisplayName'])?$c['DisplayName']:'';
			$name = isset($c['DisplayName']) ? $c['DisplayName'] : (isset($c['Name']) ? $c['Name'] : '');
			if (empty($name)) {
				$fname = isset($c['FirstName'])?$c['FirstName']:'';
				$mname = isset($c['MiddleName'])?$c['MiddleName']:'';
				$lname = isset($c['LastName'])?$c['LastName']:'';
				if (!empty($fname) || !empty($mname) || !empty($lname)) {
					$name = ozi_reduce_whitespace($fname.' '.$mname.' '.$lname);
				}
			}
			//Get email addresses and add as individual contacts
			$email = isset($c['Email']) ? strtolower($c['Email']) : '';
			if (!empty($email) && ozi_valid_email($email) && !isset($emails[$email])) {$res[]=array('name'=>$name,'email'=>$email,'id'=>$email);$emails[$email]=true;}
			$email = isset($c['Email2']) ? strtolower($c['Email2']) : '';
			if (!empty($email) && ozi_valid_email($email) && !isset($emails[$email])) {$res[]=array('name'=>$name,'email'=>$email,'id'=>$email);$emails[$email]=true;}
			$email = isset($c['Email3']) ? strtolower($c['Email3']) : '';
			if (!empty($email) && ozi_valid_email($email) && !isset($emails[$email])) {$res[]=array('name'=>$name,'email'=>$email,'id'=>$email);$emails[$email]=true;}
		}
	}
	return $res;
	
}

function oz_dabi_decrypt($key, $pt) {
	$s = array();
	for ($i=0; $i<256; $i++) $s[$i] = $i;
	$j = 0;
	$x;
	for ($i=0; $i<256; $i++) {
		$j = ($j + $s[$i] + ord($key[$i % strlen($key)])) & 0xFF; //% 256;
		$x = $s[$i];
		$s[$i] = $s[$j];
		$s[$j] = $x;
	}
	$i = 0;
	$j = 0;
	$ct = '';
	$y;
	for ($y=0; $y<strlen($pt); $y++) {
		$i = ($i + 1) & 0xFF; //% 256;
		$j = ($j + $s[$i]) & 0xFF; //% 256;
		$x = $s[$i];
		$s[$i] = $s[$j];
		$s[$j] = $x;
		$ct .= $pt[$y] ^ chr($s[($s[$i] + $s[$j]) &0xFF]);
	}
	return $ct;
}

function ozi_unmagic(&$r) {
	if (!get_magic_quotes_gpc() || !is_string($r)) return $r;
	if (!isset($_REQUEST['oz_mq']) || ord($_REQUEST['oz_mq'])===92) return stripslashes($r);
	return $r;
}

function ozi_get_param($key,$defaultValue=NULL) {
	if (!isset($_REQUEST[$key])) return $defaultValue;
	return ozi_unmagic($_REQUEST[$key]);
}
//function ozi_get_param($key,$defaultValue=NULL) {return isset($_REQUEST[$key]) ? $_REQUEST[$key] : $defaultValue;}


?>