<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Blackplanet invite sender

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
//include_once(dirname(__FILE__).'/abimporter.php');
if (!defined('__ABI')) die('Please include abi.php to use this invite sender!');

global $_OZ_SERVICES;
$_OZ_SERVICES['is_blackplanet'] = array('type'=>'is', 'label'=>'BlackPlanet', 'class'=>'BlackPlanetInviter');

/////////////////////////////////////////////////////////////////////////////////////////
//BlackPlanetInviter
/////////////////////////////////////////////////////////////////////////////////////////
//@api
class BlackPlanetContact extends SocialContact {
	function BlackPlanetContact ($uid, $name, $imgurl) {
		parent::SocialContact($uid, $name, $imgurl);
	}
}

define('BlackPlanetInviter_CONTACT_REGEX',"/class=\"block friendGridItem\".*?other_user_id=(\\d+).*?class=\"photo_member_medium\".*?<img.[^>]*?src=\"([^\"]*)\".*?class=\"username\".*?<span>([^<]*)<\/span>/ims");
define('BlackPlanetInviter_NEXTPAGE_REGEX',"/<a\\shref=\"([^\"]*)\"\\s+id=\"next_page\"/ims");
define('BlackPlanetInviter_TOKEN_REGEX',"/send_request\\('\/home\/ajax\/status_update.*?token='\\s*\\+\\s*encodeURIComponent\\('([^']*)/ims");

define('BlackPlanetCaptcha_MODE_LOGIN_CAPTCHA',0);
define('BlackPlanetCaptcha_MODE_MESSAGE_CAPTCHA',1);
define('BlackPlanetCaptcha_MODE_BULLETIN_CAPTCHA',2);

//@api
class BlackPlanetCaptcha extends CaptchaChallenge {

	var $form;
	var $challenge;
	var $mode;
	var $remainingContacts;
	var $subject;
	var $message;
}



//@api
class BlackPlanetInviter extends WebRequestor {


	var $ver;

	//@api
	function getInfo () {
		return array('id'=>'blackplanet');
	}

	//@api
	function login ($loginid, $password) {
		oz_set_domain('blackplanet');
	 
//		$this->useHttp1_1 = true;
//	 	$this->lastUrl = 'http://www.blackplanet.com/index.html';
		$form = new HttpForm;
		$form->action = "http://www.blackplanet.com/index.html";
		$form->addField('site_login_submit','1');
		//$form->addField('user_id','');
		//$form->addField('challenge','');
		//$form->addField('id','');
		$form->addField('redirect','');
		$form->addField('username',$loginid);
		$form->addField('password',$password);
		//$form->addField("_authtrkcde", "{#TRKCDE#}");
		$html = $this->postForm($form);
		
		if ($this->lastStatusCode!=200) {
			$this->close();
			return abi_set_error(_ABI_FAILED,'Server error '.$this->lastStatusCode);
		}
		
		if (strpos($html, 'Incorrect member name/password combination')!==FALSE) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}
		if (strpos($html, 'div class="error_msg"')!=false) {
			$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Unknown authentication error');
		}

		$this->close();
		return abi_set_success();
	}


	//@api
	function fetchContacts ($maxFetch=NULL, $maxPages=NULL) {

		//Get max contacts, pages, duration to fetch contacts
		if ($maxFetch===NULL) $maxFetch = oz_get_config('limit.max_contacts',1000);
		if ($maxPages===NULL) $maxPages = oz_get_config('limit.max_pages',30);

		if ($this->ver==1) {
			//version 1
			$html = $this->httpGet('http://www.blackplanet.com/canvas/edit_friends.html');
		}
		else {
			//version 2
			$html = $this->httpGet('http://www.blackplanet.com/your_page/manage/friends.html');
		}

		//Loop
		$ids = array();
		$al = array();
		//Allow up to 30 pages of contacts
		for ($i=0; $i<$maxPages; ++$i) {

			//Extract contacts on page
			preg_match_all(BlackPlanetInviter_CONTACT_REGEX, $html, $matches, PREG_SET_ORDER);
			foreach ($matches as $val) {
				$uid = trim($val[1]);
				if (!isset($ids[$uid])) {
					$ids[$uid] = $uid;
					$imgurl = htmlentities2utf8(trim($val[2]));
					$name = htmlentities2utf8(trim($val[3]));
					$contact = new BlackPlanetContact($uid,$name,$imgurl);
					$al[] = $contact;
					if (count($al)>=$maxFetch) break;
				}

			}
			if (count($al)>=$maxFetch) break;
			if ($i+1>=$maxPages) break;

			//Get next page uri to jump to
			$nextPageUri = null;
			if (preg_match(BlackPlanetInviter_NEXTPAGE_REGEX,$html,$matches)) {
				$nextPageUri = htmlentities2utf8($matches[1]);
				$nextPageUri = $this->makeAbsolute($this->lastUrl, $nextPageUri);
			}

			//If we're at the last/only page, then exit
			if (empty($nextPageUri)) {
				break;
			}
			$html = $this->httpGet($nextPageUri);
		}

		return $al;
	}

	//returns true if successful, false if failed.
	//@api
	function sendMessage ($uid, $subject, $message, $saveToSent = false) {
		$toline = 'You';
		if (oz_instanceof($uid,'SocialContact')) {
			$toline = $uid->name;
			$uid = $uid->uid;
		}
		$form = new HttpForm;
		$form->action = 'http://www.blackplanet.com/notes/compose_popup.html';
		$form->addField('_form0_submit','send');
		$form->addField('recipient_user_id',$uid);
		$form->addField('category_id','3');
		$form->addField('to_line',$toline);
		$form->addField('parent_callback','');
		$form->addField('subject',$subject);
		$form->addField('body',$message);
		$html = $this->postForm($form);

		// See if captcha triggered?
		$c = $this->extractCaptcha($html);
		if ($c!==NULL) {
			$form = oz_extract_form_by_name($html, "_form0");
			$c->form = form;
			$c->subject = $subject;
			$c->message = $message;
			$c->mode = BlackPlanetCaptcha_MODE_MESSAGE_CAPTCHA;
			return $c;
		}
		
		//If we match this string, it means the user needs to verify his/her email address before being allowed to send messages
		//if (strpos($html,'/user/account/verify_interrupt.html')>0) {
		//}

		//Recaptcha may also be triggered. In this case, we'll just fail for now, as BlackPlanet seems to not ask
		//for recaptcha again once it's properly answered.

		return strpos($html,'tmpl_confirmbox')!==FALSE;
	}

	//@api
	function sendMessages ($uids, $subject, $message, $saveToSent = false) {
		$res = true;
		foreach ($uids as $uid) {
			$res &= $this->sendMessage($uid, $subject, $message, $saveToSent);
		}
		return $res==true;
	}

	//@api
	function postBulletin ($subject,$message) {
		$form = new HttpForm;
		$form->addField('bulletin_board_form_submit','submit');
		$form->addField('subject',$subject);
		$form->addField('body',$message);
		$postData = $form->buildPostData();
		$html = $this->httpPost('http://www.blackplanet.com/bulletin_board/post.html', $postData);

		// See if captcha triggered?
		$c = $this->extractCaptcha($html);
		if ($c!==NULL) {
			$form = oz_extract_form_by_name($html, "bulletin_board_form");
			$c->form = $form;
			$c->subject = $subject;
			$c->message = $message;
			$c->mode = BlackPlanetCaptcha_MODE_BULLETIN_CAPTCHA;
			return $c;
		}

		if (strpos($html,'<div class="error_msg">')>0)
			return false;

		$form2 = oz_extract_form_by_name($html,'bulletin_board_form');
		if (is_null($form2))
			return false;
		$form2->setField("bulletin_board_form_submit", "submit");
		$postData = $form2->buildPostData();
		$html = $this->httpPost($form2->action, $postData);

		return strpos($html,'<div class="error_msg">')===false;
	}
	
	
	function extractCaptcha ($html) {
		if ($html===NULL) return NULL;
		$c = $this->extractRecaptchaChallenge($html);
		if ($c===NULL) return NULL;
		$captcha = new BlackPlanetCaptcha;
		$captcha->type = "image";
		$captcha->url = $c[1];
		$captcha->challenge = $c[0];
		return $captcha;
	}

		
	
	//@api
	function verifyCaptcha ($captcha) {
	 
	 	$form = $captcha->form;
		$form->setField("recaptcha_challenge_field", $captcha->challenge);
		$form->setField("recaptcha_response_field", $captcha->answer);
		
		if ($captcha->mode==BlackPlanetCaptcha_MODE_MESSAGE_CAPTCHA) {
			$form->setField("subject", $captcha->subject);
			$form->setField("body", $captcha->message);
		}
		else if ($captcha->mode==BlackPlanetCaptcha_MODE_BULLETIN_CAPTCHA) {
			$form->setField("subject", $captcha->subject);
			$form->setField("body", $captcha->message);
		}
		$html = $this->postForm($form);

		$captcha2 = $this->extractCaptcha($html);
		if (is_null($captcha2)) return true;
		else {
			//Copy properties across
			$captcha2->subject = $captcha->subject;
			$captcha2->message = $captcha->message;
			$captcha2->remainingContacts = $captcha->remainingContacts;
			$captcha2->remainingCount = $captcha->remainingCount;
			$captcha2->mode = $captcha->mode;
			return $captcha2;
		}
	}

	//@api
	function resumeFromCaptcha($captcha) {
		$cl = $captcha->remainingContacts;
		if ($cl!=null && count($cl)>1) {
			array_shift($cl);
			return $this->sendMessages($cl,$captcha->subject, $captcha->message, true);
		}
		else {
			return true;
		}
	}	
	
	//@api
	function postShoutOut ($message) {

		$message = substr($message,0,120);	 
	 
		$html = $this->httpGet("/home/index.html");
		if (preg_match(BlackPlanetInviter_TOKEN_REGEX,$html,$matches)) {
		 
			$token = $matches[1];
			$url = "/home/ajax/status_update.html?view=hp&action=add&message=".urlencode($message)."&token=".$token."&_ctk_cache_burst=0.26789857633411884";
			$html = $this->httpGet($url);
			return TRUE;
		}
		else {
			abi_set_error(_ABI_FAILED,'Cannot find shoutout token');
			return FALSE;
		}
	}

	
}
